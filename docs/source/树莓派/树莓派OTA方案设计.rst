基于树莓派4b和OpenWrt的OTA方案设计
===========================================================

目标：嵌入式Linux上的OTA方案设计

目标硬件：树莓派4b

目标系统：OpenWrt23.05

目标软件：SWUpdate

从Linux操作系统的角度来看嵌入式硬件，一般能接触、涉及和修改的最底层软件是U-Boot，
然后是kernel和rootfs。

也就是说，潜在的操作系统可对其进行更新的内容包括：

1. SPL读取的配置、二进制、dtb、dtbo等
2. u-boot.bin
3. kernel.img
4. rootfs img


U-Boot在嵌入式设备中存在的必要性
-----------------------------------------------------------

解释这一点，需先解释Linux在嵌入式设备中存在的必要性，这个在此不赘述，当作是前提条件。

对于嵌入式系统的启动来说，U-Boot并不一定是必须的，比如像树莓派4b这种，在其EEPROM上
已固化了U-Boot SPL，而U-Boot SPL也拥有直接引导kernel启动的能力，所以即使没有U-Boot
系统亦可完成启动，但此时因为缺少一个中间运行、可动态改变参数、地址的U-Boot“中间层”，
对于启动引导的动态支持就不够。

现在及未来的IoT设备、车联网设备已经呈现的趋势是，芯片的制程越来越高，可塞进去的功能越来
越多，硬件配置为了在未来数年不被淘汰也足够冗余，这要求“固化”的东西越来越少、层级越来越低。


U-Boot升级的必要性
-----------------------------------------------------------

U-Boot升级的最大必要性还是满足”非固化”的需求，U-Boot本身是一段裸机程序，不含OS,比如说我们
可以将系统备份还原、数据备份还原、上电信号等放在U-Boot中实现，1是快，2是层级更低更安全。 

在涉及到U-Boot的修改和更新时，如果是采用传统的镜像烧录（卡刷或芯片原厂烧录工具）的方式来看，
当然没问题，但这通常是开发厂商、修理商才能接触到的，并不是面向终端消费者的。

.. note:: 能否实现U-Boot升级还取决于硬件，其SPL或类似机制中是否提供了类“tryboot”机制，
    可用于启动失败的回退，避免设备在终端用户手中变砖的严重情况出现。


安全OTA的必要性
-----------------------------------------------------------

各种各样的可维问题：

1. 升级掉电
2. 错误、恶意删改数据
3. 软件bug

应对方案：
1. 双机热备份
2. 容灾备份

安全OTA可实现单机多备份。

启动路径设计
-----------------------------------------------------------

基于以上U-Boot存在及对其升级的必要性，我们来设计树莓派上的系统启动步骤：

方案1. 利用树莓派SPL提供的 autoboot和tryboot 机制可实现高级OTA功能（A/B、delta、auto）。

* 升级范围：kernel、rootfs

* 启动路径：SPL - KERNEL - ROOTFS

* 关键特征：

    1. SPL支持的 autoboot 选择启动分区

    2. 启动分区中包含 kernel 及 cmdline.txt 配置

    3. 升级框架更新指定的 kernel 启动分区和 rootfs 分区
   
    4. 利用SPL支持的 tryboot 机制尝试启动，成功后修改持久化启动分区配置

* 优点：实现方案简洁，速度最快。

* 缺点：该套方案依赖硬件SPL本身提供的解决方案（autoboot、tryboot等机制）

方案2. 利用 U-Boot 启动引导可实现高级OTA功能（A/B、delta、auto）。

* 升级范围：kernel、rootfs

* 启动路径：SPL - UBOOT - KERNEL - ROOTFS

* 关键特征：

    1. 第一个分区默认为 U-Boot 分区（或使用SPL支持的 autoboot 指定 U-Boot 分区）

    2. cmdline.txt、dtb地址等在 U-Boot 的 env 中指定

    2. kernel分区中只用包含 kernel

    3. 升级框架更新指定的 kernel 启动分区和 rootfs 分区
   
    4. 利用U-Boot的的 BootCount 机制和环境变量机制，成功后修改环境变量标志位

* 优点：实现方案通用性强，与硬件SPL解耦，不依赖。

* 缺点：U-Boot自身无法被升级，烧录后处于固化状态。

方案3. 利用树莓派SPL提供的 autoboot和tryboot 机制和 U-Boot 启动引导可实现高级OTA功能（A/B、delta、auto）。

* 升级范围：u-boot、kernel、rootfs

* 启动路径：SPL - UBOOT - KERNEL - ROOTFS

* 关键特征：

    1. 使用autoboot机制指定 U-Boot 分区(U-BootA或U-BootB)

    2. cmdline.txt、dtb地址等在 U-Boot 的 env 中指定

    3. kernel分区中只用包含 kernel

    4. 升级框架更新指定的 kernel 启动分区和 rootfs 分区
   
    5. 面对不含u-boot的更新，利用U-Boot的的 BootCount 机制和环境变量机制

    6. 面对含u-boot的更新，利用tryboot机制尝试启动，成功后修改autoboot.txt

* 优点：可更新的层级低，定制程度可以做的很深。

* 缺点：实现方案较复杂，依赖SPL能力。

升级方案3的具体设计
-----------------------------------------------------------

支持 U-Boot、kernel、rootfs 升级，涉及到的分区包括：

* persistent分区 (存放 autoboot.txt)
* uboota分区
* ubootb分区
* kernela分区
* kernelb分区
* rootfsa分区
* rootfsb分区

互为分区，互为备份。

关键技术：

1. MBR使用扩展分区进行多分区划分
2. U-Boot启动计数机制
3. U-Boot环境变量机制
4. 高级升级框架移植
5. 守护进程脚本编写
6. 树莓派的autoboot和tryboot机制
7. 可带参数的reboot命令扩展

关键问题：A系统环境变量与B系统环境变量互通的问题
-----------------------------------------------------------

在树莓派设备上，U-Boot环境变量存储在 mmcblk0 的指定地址上，系统切换不会影响其丢失。


关键问题：dtbo分区支持问题
-----------------------------------------------------------

在U-Boot中手动加载dtbo不成问题，看是否需要此功能。


